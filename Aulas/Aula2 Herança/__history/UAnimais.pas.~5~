unit UAnimais;

interface

type
  TENumAnimal = (stCachorro, stGato, stPassaro);

  TAnimal = class
    private

      FPatas: Byte;

      function GetPatas:Byte;
      procedure SetPatas(const aValue:Byte);

    public
      function RetornarSom: String; virtual; abstract;
      property Patas: Byte read GetPatas write SetPatas;
  end;

  TCachorro = class(TAnimal)
    private
    public
      constructor Create;
      function RetornarSom: String; override;
  end;

  TGato = class(TAnimal)
    private
    public
      constructor Create;
      function RetornarSom: String; override;
  end;

  TPassaro = class(TAnimal)
    private
    public
      constructor Create;
      function RetornarSom: String; override;
  end;

implementation

{ TPassaro }

procedure TAnimal.SetPatas(const aValue: Byte);
begin
  FPatas:= aValue;
end;

function TAnimal.GetPatas: Byte;
begin
  Result:= FPatas;
end;

function TCachorro.RetornarSom: string;
begin
  Result:= 'Au au';
end;

constructor TCachorro.Create;
begin
  FPatas:= 4;
end;

function TGato.RetornarSom: string;
begin
  result:= 'Miau Miauuuuuu';
end;

constructor TGato.Create;
begin
  FPatas:= 4;
end;

function TPassaro.RetornarSom: string;
begin
  result := 'Piuu piuu ps:(não sou um pintinho)';
end;

constructor TPassaro.Create;
begin
  FPatas:= 2;
end;

end.
